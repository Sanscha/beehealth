import 'dart:io';
import 'dart:math';
import 'dart:typed_data';
import 'package:BeeSentinel/result_screen.dart';
import 'package:BeeSentinel/resulthistory_screen.dart';
import 'package:BeeSentinel/notification_screen.dart';
import 'package:BeeSentinel/sidebar.dart';
import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:image_picker/image_picker.dart';
import 'package:google_generative_ai/google_generative_ai.dart';
import 'package:loading_animation_widget/loading_animation_widget.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import 'package:timezone/data/latest.dart' as tz;
import 'package:timezone/timezone.dart' as tz;

class ScanBeeScreen extends StatefulWidget {
  const ScanBeeScreen({super.key});

  @override
  State<ScanBeeScreen> createState() => _ScanBeeScreenState();
}

class _ScanBeeScreenState extends State<ScanBeeScreen> {
  File? _imageFile;
  bool _isLoading = false;
  final picker = ImagePicker();
  late GenerativeModel _model;
  final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
  FlutterLocalNotificationsPlugin();
  final Random _random = Random();

  @override
  void initState() {
    super.initState();
    _initializeGemini();
    _initializeNotifications();
    _checkForPendingNotifications();
  }

  void _initializeGemini() {
    _model = GenerativeModel(
      model: 'gemini-1.5-flash',
      apiKey: 'AIzaSyCm0P159Sw13W6GbJ84m7sN08yCQWn4PEQ',
    );
  }

  Future<void> _initializeNotifications() async {
    tz.initializeTimeZones();
    const AndroidInitializationSettings initializationSettingsAndroid =
    AndroidInitializationSettings('@mipmap/ic_launcher');
    final InitializationSettings initializationSettings =
    InitializationSettings(android: initializationSettingsAndroid);

    await flutterLocalNotificationsPlugin.initialize(
      initializationSettings,
      onDidReceiveNotificationResponse: (NotificationResponse response) {
        Navigator.of(context).push(
          MaterialPageRoute(builder: (context) => const NotificationScreen()),
        );
      },
    );
  }

  Future<void> _checkForPendingNotifications() async {
    final prefs = await SharedPreferences.getInstance();
    final now = DateTime.now();
    final activeScans = prefs.getKeys().where((key) => key.startsWith('scan_')).toList();

    for (String scanKey in activeScans) {
      final scanData = jsonDecode(prefs.getString(scanKey)!);
      final lastUpdate = DateTime.parse(scanData['lastUpdate']);
      final daysPassed = now.difference(lastUpdate).inDays;
      final currentDay = scanData['currentDay'];

      if (currentDay < 4 && daysPassed > 0) {
        for (int i = 0; i < daysPassed && currentDay + i <= 4; i++) {
          await _processWeightUpdate(scanKey, scanData);
        }
      }
    }
  }

  Future<void> _pickImage() async {
    final pickedFile = await picker.pickImage(source: ImageSource.gallery);
    if (pickedFile != null) {
      setState(() => _imageFile = File(pickedFile.path));
      await _analyzeImage(_imageFile!);
    }
  }

  Future<void> _analyzeImage(File imageFile) async {
    setState(() => _isLoading = true);

    try {
      // ✅ Use a shorter hash-based ID
      final timestamp = DateTime.now().millisecondsSinceEpoch.toString();
      final scanId = timestamp.hashCode.toString(); // Compact 32-bit-safe string ID
      final imagePath = imageFile.path;
      final prefs = await SharedPreferences.getInstance();

      if (prefs.containsKey('scan_$scanId')) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text("This image was already scanned")),
        );
        return;
      }

      final analysisResults = await _processImageAnalysis(imageFile);

      final initialWeight = 8 + _random.nextDouble() * 2;
      final weightData = {
        'scanId': scanId,
        'imagePath': imagePath,
        'currentWeight': initialWeight,
        'currentDay': 1,
        'lastUpdate': DateTime.now().toIso8601String(),
        'weightHistory': jsonEncode([
          {
            'day': 1,
            'weight': initialWeight,
            'increase': 0.0,
            'timestamp': DateTime.now().toIso8601String()
          }
        ])
      };

      await prefs.setString('scan_$scanId', jsonEncode(weightData));
      await _saveToHistory(scanId, imagePath, analysisResults, initialWeight);

      await _showWeightNotification(
        scanId: scanId,
        imagePath: imagePath,
        weight: initialWeight,
        increase: 0.0,
        isInitial: true,
      );

      await _scheduleDailyWeightUpdates(scanId, imagePath, initialWeight);

      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) => ResultScreen(
            imageFile: imageFile,
            analysisText: analysisResults['analysisText']!,
            detectedDisease: analysisResults['detectedDisease']!,
            medicines: analysisResults['medicines']!,
          ),
        ),
      );
    } catch (e) {
      print(e.toString());
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("Error: ${e.toString()}")),
      );
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<Map<String, String>> _processImageAnalysis(File imageFile) async {
    Uint8List imageBytes = await imageFile.readAsBytes();
    final content = [
      Content.data('image/jpeg', imageBytes),
      Content.text(
          "Analyze this honeybee image and provide:\n"
              "- Health: [Healthy/Unhealthy]\n"
              "- Disease: [None/Varroa Mites/Nosema/Deformed Wing Virus/American Foulbrood]\n"
              "- Wings: [Intact/Partially Broken/Fully Broken/Missing]\n"
              "- Legs: [All Present/Missing Front/Missing Middle/Missing Rear]\n"
              "- Temp: [Optimal/High/Low]\n"
              "- Humidity: [Optimal/High/Low]\n"
              "- Species: [Apis Mellifera/Apis Cerana/Unknown]\n"
              "Respond in single line with comma-separated values in the same order"
      ),
    ];

    final response = await _model.generateContent(content);
    String responseText = response.text ?? "No response";
    List<String> parts = responseText.split(',').map((e) => e.trim()).toList();
    while (parts.length < 7) parts.add("Unknown");

    String tempDisplay = _formatTemp(parts[4]);
    String humidityDisplay = _formatHumidity(parts[5]);

    String analysisText = "• Health: ${parts[0]}\n"
        "• Disease: ${parts[1]}\n"
        "• Wings: ${parts[2]}\n"
        "• Legs: ${parts[3]}\n"
        "• Temperature: $tempDisplay\n"
        "• Humidity: $humidityDisplay\n"
        "• Species: ${parts[6]}";

    String detectedDisease = parts[1].contains("None") ? "No Disease Found" : parts[1];
    String medicines = detectedDisease == "No Disease Found"
        ? "No medicines needed"
        : await _fetchMedicines(detectedDisease);

    return {
      'analysisText': analysisText,
      'detectedDisease': detectedDisease,
      'medicines': medicines,
    };
  }

  Future<void> _scheduleDailyWeightUpdates(String scanId, String imagePath, double initialWeight) async {
    double currentWeight = initialWeight;

    for (int day = 2; day <= 4; day++) {
      final scheduledTime = tz.TZDateTime.now(tz.local).add(Duration(days: day - 1));

      int notificationId = (int.tryParse(scanId) ?? 1000) + day;

      await flutterLocalNotificationsPlugin.zonedSchedule(
        int.parse(scanId) + day,
        'Day $day Weight Update',
        'Your hive weight update is ready',
        scheduledTime,
        const NotificationDetails(
          android: AndroidNotificationDetails(
            'weight_updates',
            'Weight Updates',
            channelDescription: 'Daily hive weight progress',
            importance: Importance.high,
            priority: Priority.high,
          ),
        ),
        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle, // ✅ required now
        matchDateTimeComponents: DateTimeComponents.time, // Optional if repeating daily
        payload: jsonEncode({
          'scanId': scanId,
          'imagePath': imagePath,
          'day': day,
        }),
      );


    }
  }

  Future<void> _processWeightUpdate(String scanKey, Map<String, dynamic> scanData) async {
    final prefs = await SharedPreferences.getInstance();
    final currentWeight = scanData['currentWeight'];
    final currentDay = scanData['currentDay'];

    if (currentDay >= 4 || currentWeight >= 36) return;

    num remainingWeight = 36 - currentWeight;
    double dailyIncrease = (remainingWeight / (4 - currentDay)) * (0.8 + _random.nextDouble() * 0.4);
    double newWeight = (currentWeight + dailyIncrease).clamp(0, 36);

    var weightHistory = List<Map<String, dynamic>>.from(jsonDecode(scanData['weightHistory']));
    weightHistory.add({
      'day': currentDay + 1,
      'weight': newWeight,
      'increase': dailyIncrease,
      'timestamp': DateTime.now().toIso8601String()
    });

    scanData['currentWeight'] = newWeight;
    scanData['currentDay'] = currentDay + 1;
    scanData['lastUpdate'] = DateTime.now().toIso8601String();
    scanData['weightHistory'] = jsonEncode(weightHistory);

    await prefs.setString(scanKey, jsonEncode(scanData));

    await _showWeightNotification(
      scanId: scanData['scanId'],
      imagePath: scanData['imagePath'],
      weight: newWeight,
      increase: dailyIncrease,
    );
  }

  Future<void> _showWeightNotification({
    required String scanId,
    required String imagePath,
    required double weight,
    required double increase,
    bool isInitial = false,
  }) async {
    const AndroidNotificationDetails androidDetails = AndroidNotificationDetails(
      'weight_updates',
      'Weight Updates',
      channelDescription: 'Daily hive weight progress',
      importance: Importance.high,
      priority: Priority.high,
      playSound: true,
    );

    const NotificationDetails platformDetails = NotificationDetails(android: androidDetails);

    String title = isInitial ? 'Initial Weight Recorded' : 'Day ${(increase == 0 ? 1 : (weight~/10)+1)} Weight Update';
    String body = isInitial
        ? 'Initial weight: ${weight.toStringAsFixed(2)}g'
        : 'Increased by ${increase.toStringAsFixed(2)}g (Total: ${weight.toStringAsFixed(2)}g)';

    await flutterLocalNotificationsPlugin.show(
      int.parse(scanId),
      title,
      body,
      platformDetails,
      payload: jsonEncode({
        'scanId': scanId,
        'imagePath': imagePath,
        'weight': weight,
        'increase': increase,
        'isInitial': isInitial,
      }),
    );
  }

  Future<void> _saveToHistory(
      String scanId,
      String imagePath,
      Map<String, String> analysisResults,
      double initialWeight,
      ) async {
    final prefs = await SharedPreferences.getInstance();
    List<String> history = prefs.getStringList('scanHistory') ?? [];

    Map<String, dynamic> newEntry = {
      "scanId": scanId,
      "imagePath": imagePath,
      "analysisText": analysisResults['analysisText'],
      "detectedDisease": analysisResults['detectedDisease'],
      "medicines": analysisResults['medicines'],
      "timestamp": DateTime.now().toIso8601String(),
    };

    history.add(jsonEncode(newEntry));
    await prefs.setStringList('scanHistory', history);
  }

  String _formatTemp(String status) {
    status = status.replaceAll('-', '').trim();
    if (status == "Unknown" || status == "Optimal") return "${(33 + _random.nextDouble() * 3).toStringAsFixed(1)}°C (Optimal)";
    return status == "High"
        ? "${(36 + _random.nextDouble() * 2).toStringAsFixed(1)}°C (High)"
        : "${(30 + _random.nextDouble() * 3).toStringAsFixed(1)}°C (Low)";
  }

  String _formatHumidity(String status) {
    status = status.replaceAll('-', '').trim();
    if (status == "Unknown" || status == "Optimal") return "${(50 + _random.nextDouble() * 20).toStringAsFixed(1)}% (Optimal)";
    return status == "High"
        ? "${(70 + _random.nextDouble() * 10).toStringAsFixed(1)}% (High)"
        : "${(30 + _random.nextDouble() * 20).toStringAsFixed(1)}% (Low)";
  }

  Future<String> _fetchMedicines(String disease) async {
    try {
      final response = await _model.generateContent([
        Content.text(
            "List exactly 3 medicines for $disease in honeybees in this exact format:\n"
                "1. MedicineName - BriefUsage\n"
                "2. MedicineName - BriefUsage\n"
                "3. MedicineName - BriefUsage"
        ),
      ]);

      return response.text
          ?.split('\n')
          .where((line) => line.trim().isNotEmpty)
          .take(3)
          .map((line) => line.replaceFirst(RegExp(r'^\d+\.\s*'), '• '))
          .join('\n') ?? "No medicines found";
    } catch (e) {
      return "Error fetching medicines";
    }
  }

  void _openHistoryScreen() {
    Navigator.push(
      context,
      MaterialPageRoute(builder: (context) => ResultsHistoryScreen()),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.yellow.shade700,
        title: Text(
          'Scan Bee Health',
          style: GoogleFonts.poppins(
            fontSize: 20, fontWeight: FontWeight.bold, color: Colors.black,
          ),
        ),
        actions: [
          IconButton(
            icon: Icon(Icons.history),
            onPressed: _openHistoryScreen,
          ),
        ],
      ),
      drawer: CustomSidebar(),
      body: Stack(
        children: [
          Container(
            decoration: BoxDecoration(
              image: DecorationImage(
                image: AssetImage('assets/images/scan_background.jpeg'),
                fit: BoxFit.cover,
              ),
            ),
          ),
          Container(color: Colors.black.withOpacity(0.2)),
          Center(
            child: SingleChildScrollView(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Card(
                    margin: EdgeInsets.all(20),
                    child: Padding(
                      padding: EdgeInsets.all(20),
                      child: Column(
                        children: [
                          _imageFile != null
                              ? ClipRRect(
                            borderRadius: BorderRadius.circular(8),
                            child: Image.file(_imageFile!, height: 200),
                          )
                              : Icon(Icons.image, size: 100, color: Colors.grey),
                          SizedBox(height: 20),
                          ElevatedButton(
                            onPressed: _pickImage,
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.yellow.shade700,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(8),
                              ),
                              padding: EdgeInsets.symmetric(vertical: 15, horizontal: 40),
                            ),
                            child: Text(
                              "Select Image",
                              style: TextStyle(
                                fontSize: 15,
                                fontWeight: FontWeight.w600,
                                color: Colors.black,
                              ),
                            ),
                          ),
                          SizedBox(height: 20),
                          _isLoading
                              ? LoadingAnimationWidget.hexagonDots(
                            color: Colors.yellow.shade700,
                            size: 40,
                          )
                              : SizedBox.shrink(),
                        ],
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}